Applied Principles
---------------------
- separation of concerns
- controllers handle interaction with session objects and their attributes. Session objects are never propagated
- frontend layer only consumes and produces data transfer objects (dto)
- only services interact with the model classes and the repository
- JWT-Token for user authentication + session cookie
- QuizState is persisted via JWT-Token User-Id to dedicated database
- new effects need to be added to the registry in QuizModifierEffectFactory
- Rich Domain Model
- Presented effects are chosen by weighted random drawing. The weights depend on the overall rarity of a effect modifier.
    Each modifier can have a tier which is drawn separately. The Tier determines the duration + magnitude of the modifiereffect.
- Swagger for frontend documentation and javadoc for backend documentation

Business logic notes
---------------------------
- Randomization logic is currently handled by the database.
    - eventually we could initialize a registry of all questions at startup or use a in memory database / cache.
- the conversion from model entity classes to dtos is always invoked in the controller
- GameEventDto is the parent class of all GameEventsDtos. A GameEventDto-subclass always contains all necessary data
  that the frontend needs to process a gameevent and display it. The frontend can then decide how to display the event,
  but it cannot request specific event types from the backend, the type will be chosen by backend logic only.

Learnings
------------------
- Rich Domain Model (model methods can manipulate model data) vs. Anemic Domain Model (only getters and setters in model classes)
    - with Rich Domain Model we allow methods in the model class that manipulate model data directly (e.g. incrementing an int field)
    - for methods that do need to call different components / are more complex, we still put them in the service
    - Anemic Domain Model actually violates Single Responsibility Principle, since services now implement business logic AND basic object manipulation
    - the border between a method that belongs in a service and that belongs in a model class can be fluent with Rich Domain Model and often needs to be decided case by case

- The controllerâ€™s responsibility should be limited to handling HTTP requests, validating inputs, and delegating the business logic to services,
   whereas services perform the business operations including data retrieval and persistence through repositories.

- when using specific spring profiles (with SPRING_PROFILES_ACTIVE=PRODUCTION) it will automatically apply the
  corresponding application properties (application-production.properties) and the standard application.properties

- Heroku can only run one container per app (one dyno per app).
    - To deploy both frontend and backend as containers, you need two separate Heroku apps: one for the frontend and one for the backend.
    - Both apps will communicate using public Heroku URLs (e.g., your-backend-app.herokuapp.com) via HTTP(S).
    - Heroku uses its own dyno containers if we just push the jar. To use docker we would push a docker image.
      - The frontend needs to run as docker container because it also includes a nginx server that acts as reverse proxy.
      - The backend on the other hand could also run in dyno container because it is no "multi stage" build
      - It is still beneficial to have a docker setup for the backend to maintain flexibility in hosting options

- Regarding JSON serialization of parent-sub classes:
  -  If you assign a subclass object (e.g., QuestionGameEventDto) to a GameEventDto field in your QuizSaveDto and
     then serialize it, it will serialize all attributes from the subclass (not just the parent class's attributes)
  - When using a polymorphic field (e.g., GameEventDto), the actual type of the object (the subclass) will determine which attributes are serialized.
    For instance, if GameEventDto is a superclass, and you assign a QuestionGameEventDto (subclass),
    Jackson will detect that the object is of type QuestionGameEventDto and serialize all its fields.
   - Polymorphism also works in java but if we want to use the actual child class methods or access its attributes, we would need to cast the object to the subclass

- Regarding Cors: even without reverse proxy for the frontend requests we do not need to allow every single origin of request (otherwise reverse proxy or proxy-"cors" server would be mandatory)
  The header with which the requests will be send from the client machine contain the origin header of the frontend server. so the backend "thinks" it is accessed by the frontend, not some client browser machine.

 -@JoinColumn(name = "quiz_state_id") joincolumn jpa annotations are helpful to avoid duplicate "ownership" of a bidirectional relation.
  Without it both ends of the relationship would create a reference to the other part. but most of the time, we only want one part
  to reference the other (e.g. each GameEvent belongs to da QuizState and thus the QuizState id should be in the QuizEvent table,
  but we do not neeed to have an extra table that associates quizstates with GameEvents, because that would be redundant.
  Sometimes we might want it to speed up searches etc. but most of the time one sided ownership is fine.
  the mappedBy attribute is used in the "non owning" side of the relationship. mappedBy = quizState means that the attribute is
   mapped by quizState in the other table.

-  @AuthenticationPrincipal annotation is used to directly inject the currently authenticated user into a method parameter.
   Specifically, it extracts the user details from the authentication token, which means the authenticated user's information
   is available for use without the need to manually parse the JWT or session. See the QuizStateController for an example.

- Use Enums for Constants: When you have a known, fixed set of constants (like event types), enums are the recommended
 approach in Java. They prevent errors and improve maintainability.

 - Spring Security by default expects the roles to be prefixed with "ROLE_" (e.g., ROLE_USER, ROLE_ADMIN).
 when defining preauthorizations in the controller, you DON'T need to use the prefix - it is stripped automatically.
   If you don't want to use this prefix with your roles, you can customize it by setting the rolePrefix property in the @EnableWebSecurity annotation.
   For example, @EnableWebSecurity(rolePrefix = "") will remove the prefix.



Tech Stack
-------------------
Spring Suite, Maven
- Testing
    - JUnit
    - Swagger
- Authentication
    - Spring Security
    - JWT
- Protocols
    - Https
- Persistence
    - JPA (Hibernate)
    - mysql8

...

 Setup info
------------------------------------
- When running in docker container make sure frontend backend and database are in the same network
    - used container ports: mysql8 3306:3306, frontend 3000:80, backend 8443:8843
- Using https with self sign certificate for testing (!UNSAFE FOR PRODUCTION!)
- Example dataset provided in .csv
- the heroku production version does not work locally because of heroku handling the database
- heroku only allows one container per app, meaning i cannot deploy frontend and backend together
    - this means that for backend communication from frontend to backend i need the heroku address of the backend for the frontend
- for heroku deployment we have to disable https
    - (dynamically enabling https depending on environment does not work because there are some requests in preflight that get misinterpreted as https.
    - since preflights are not allowed to be redirected by the client browser this is a problem)


-------------------
// Dynamically enforce or disable HTTPS based on the active profile (doesn't work if we use heroku because of preflight forwarding)
.requiresChannel(channel -> {
    if ("production".equals(activeProfile)) {
        logger.info("Https not required because heroku handles it.");
        channel.anyRequest().requiresInsecure(); // Allow HTTP for production (Heroku) TODO change if we host ourselves (then we need https)
    } else {
        logger.info("Requiring https");
        channel.anyRequest().requiresSecure(); // Enforce HTTPS for other environments
    }
})


    // for in memory user management testing
    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails admin = User.withUsername("admin")
            .password(passwordEncoder().encode("admin123"))
            .roles("ADMIN")
            .build();
        UserDetails user = User.withUsername("user")
            .password(passwordEncoder().encode("user123"))
            .roles("USER")
            .build();
        return new InMemoryUserDetailsManager(admin, user);
    }